{"version":3,"sources":["firebase.js","common/Delete.js","components/Books.js","common/ChangePost.js","components/Post.js","components/singleBook.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Delete","props","Fragment","onClick","e","preventDefault","database","ref","book","bookId","remove","className","title","Books","handleChange","setState","target","name","value","handleSubmit","push","state","writer","poscript","allBooks","on","result","data","val","books","i","off","action","htmlFor","type","id","onChange","this","placeholder","minLength","handleBook","map","to","Component","modifyButtonStyle","display","ChangePost","itemRef","post","postId","displayButtons","updateButton","modifyButton","textarea","document","querySelector","style","currentTarget","update","postscript","newValue","Post","postscripts","singleBookId","Object","values","toString","posts","textareaStyle","cols","rows","defaultValue","singleBook","handleAdd","child","window","location","pathname","onSubmit","exact","App","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e52959a9.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDrz7n6Ua5IC0fSw6zA4-6ODK3oY7kok5Q\",\n    authDomain: \"epilogue-v2.firebaseapp.com\",\n    databaseURL: \"https://epilogue-v2.firebaseio.com\",\n    projectId: \"epilogue-v2\",\n    storageBucket: \"epilogue-v2.appspot.com\",\n    messagingSenderId: \"609448869081\",\n    appId: \"1:609448869081:web:fc4acc06a4835626ddd2c8\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\nimport firebase from '../firebase';\n\nfunction Delete(props) {\n\n    const deleteBook = (e) => {\n        e.preventDefault();\n        const itemRef = firebase.database().ref(`/books/${props.book.bookId}`);\n        itemRef.remove();\n    }\n\n    return (\n        <React.Fragment>\n            <button onClick={deleteBook} className=\"delete\" title=\"delete\"><i className=\"far fa-trash-alt\"></i></button>\n        </React.Fragment>\n    )\n}\n\nexport default Delete;\n\n\n","import React, { Component } from 'react';\nimport firebase from '../firebase.js';\nimport Delete from '../common/Delete';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nclass Books extends Component {\n    constructor() {\n        super();\n        this.state = {\n            title: \"\",\n            writer: \"\",\n            poscript: \"\",\n            // to display books\n            allBooks: [] \n        };\n    }\n\n    // displaying books currently in the database\n    componentDidMount() {\n        //set up listener to firebase database\n\n        const dbRef = firebase.database().ref('/books');\n        dbRef.on('value', (result) => {\n\n            let data = result.val();\n            let books = [];\n\n            for (let i in data) {\n                books.push({\n                    bookId: i,\n                    title: data[i].title,\n                    writer: data[i].writer\n                });\n\n                this.setState({\n                    allBooks: books\n                });\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        const dbRef = firebase.database().ref('/books');\n        dbRef.off()\n    }\n\n    //state updates when user's making changes\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    //on submit we are saving our form to firebase\n    handleSubmit = e => {\n        e.preventDefault();\n        const newBook = firebase.database().ref('/books');\n        //adding to firebase\n        newBook.push({\n            title: this.state.title,\n            writer: this.state.writer\n        });\n        //clearing input\n        this.setState({\n            title: \"\",\n            writer: \"\"\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"displayBooks\">\n                    <form action=\"\">\n                        <h2>Add Book</h2>\n                        <label htmlFor=\"title\" className=\"sr-only\">Add Book</label>\n                        <input\n                            type=\"text\"\n                            name=\"title\"\n                            id=\"title\"\n                            onChange={this.handleChange}\n                            value={this.state.title}\n                            placeholder=\"Add Book\"\n                            // submit an empty value\n                            minLength=\"5\"\n                        />\n                        <br />\n                        <label htmlFor=\"writer\" className=\"sr-only\">Add Writer</label>\n                        <input\n                            type=\"text\"\n                            name=\"writer\"\n                            id=\"writer\"\n                            onChange={this.handleChange}\n                            value={this.state.writer}\n                            placeholder=\"Add Writer\"\n                            // user can't submit an empty value\n                            minLength=\"5\"\n                        />\n                        <br />\n                        <button \n                            onClick={this.handleSubmit} \n                            type=\"submit\" \n                            className=\"submit\"\n                        >\n                        Submit\n                        </button>\n                    </form>\n\n                    <div \n                        className=\"oneBook\"\n                        onClick={this.handleBook}\n                    >\n                        <h2>MY BOOKS</h2>\n                        <div className=\"allBooks\">\n                    {\n                        this.state.allBooks.map((book) => {\n                            return (\n                                <div \n                                    className={`books ${book.bookId}`} \n                                    id={`${book.bookId}`}\n                                >\n                                    <p><strong>{book.title} </strong> \n                                    <br/> \n                                    by\n                                    <strong> {book.writer}</strong></p>\n                                    <div>\n                                        <Link\n                                            to={`/books/${book.bookId}`}\n                                        >\n                                            <i \n                                                className=\"fas fa-pen-nib\"  title=\"write your P.S.\"\n                                            >\n                                            </i>\n                                        </Link>\n\n                                        <Delete book={book}/>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n                        </div>\n                    </div>\n                </div>\n                \n                <div className=\"prevPage\">\n                    <Link className=\"linkBack\" to=\"/epilogue\">Back</Link>\n                </div>\n            </div>\n\n            \n        )\n    }\n}\n\nexport default Books\n","import React from 'react';\nimport firebase from '../firebase';\n\nfunction ChangePost(props) {\n\n    const itemRef = firebase.database().ref(`books/${props.bookId}/postscript/${props.post.postId}`);\n\n    // conditionsl statement to check which buttons to display\n    function displayButtons(updateButton, modifyButton) {\n        // hidden textarea\n        let textarea = document.querySelector(`textarea[id = '${props.post.postId}']`)\n        // changing visibility\n        if (textarea.style.display === \"none\") {\n            textarea.style.display = \"inline\";\n            updateButton.style.display = \"none\";\n            modifyButton.style.display = \"inline\";\n        } else {\n            textarea.style.display = \"none\";\n            updateButton.style.display = \"inline\";\n            modifyButton.style.display = \"none\";\n        }\n    }\n\n    const handleDeletePost = e => {\n        e.preventDefault();\n        itemRef.remove();\n    }\n\n    const handleUpdatePost = e => {\n        e.preventDefault();\n        // getting references to the buttons\n        let updateButton = e.currentTarget;\n        let modifyButton = document.querySelector(`button.modify.${props.post.postId}`);\n\n        // passing references to displayButton\n        displayButtons(updateButton, modifyButton);\n    }\n\n    const handleModifyPost = e => {\n        e.preventDefault();\n        \n        // if user hasn't made any changes, we want to update with the value from state\n        // if (props.newValue === null) {\n        //     console.log(itemRef);\n        // } else {\n        // }\n        itemRef.update({ postscript: `${props.newValue}` });\n\n        // getting references to the buttons\n        let modifyButton = e.currentTarget;\n        let updateButton = document.querySelector(`button.update.${props.post.postId}`);\n\n        // passing references to displayButton\n        displayButtons(updateButton, modifyButton);\n    }\n\n    return (\n        <React.Fragment>\n            <br/>\n            <button\n                onClick={handleUpdatePost}\n                className={`update ${props.post.postId}`}\n                title=\"update P.S.\"\n                // id={props.post.postId}\n            >\n                <i className=\"far fa-edit\"></i>\n            </button>\n\n            <button\n                // inline style to make handleModify works\n                style={modifyButtonStyle}\n                onClick={handleModifyPost}\n                className={`modify ${props.post.postId}`}\n                title=\"done\"\n            >\n                <i className=\"far fa-check-square\"></i>\n            </button>\n\n            <button\n                onClick={handleDeletePost}\n                className={`delete ${props.post.postId}`}\n                title=\"delete\"\n            >\n                <i className=\"far fa-trash-alt\">\n                </i>\n            </button>\n\n        </React.Fragment>\n    )\n}\n\n// styles inline to make funcion work\nconst modifyButtonStyle = {\n    display: 'none'\n}\n\nexport default ChangePost;","import React, { Component } from 'react';\nimport ChangePost from '../common/ChangePost';\nimport firebase from '../firebase.js';\n\nclass Post extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            postscripts: [],\n            // getting id as a string of selected book\n            singleBookId: Object.values(this.props).toString()\n        };\n    }\n\n    componentDidMount() {\n        // set up listener to listen for firebase updates\n        const dbRef = firebase.database().ref(`/books/${this.state.singleBookId}/postscript`);\n        dbRef.on('value', (result) => {\n\n            let data = result.val();\n            let posts = [];\n\n            // pushing postscripts from firebase to local state\n            for (let i in data) {\n                    posts.push({\n                        postId: i,\n                        postscripts: data[i].postscript\n                    });\n\n                this.setState({\n                    postscripts: posts\n                });\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        const dbRef = firebase.database().ref('/books');\n        dbRef.off()\n    }\n\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.postscripts.map((post) => {\n                    return (\n                        <React.Fragment>\n                            <p>{post.postscripts}</p>\n                            <form action=\"\">\n                                <label htmlFor=\"update\" className=\"sr-only\">Update</label>\n                                <textarea\n                                // inline style to make handleModify works\n                                    style={textareaStyle}\n                                    className=\"update\" \n                                    name=\"update\"\n                                    // need to access id for modifying\n                                    id={post.postId}\n                                    cols=\"10\" \n                                    rows=\"5\"\n                                    onChange={this.handleChange}\n                                    // using defaultValue to allow changes in a textfield\n                                    defaultValue={post.postscripts}\n                                >\n                                </textarea>\n                                <ChangePost \n                                    post={post}\n                                    bookId={this.state.singleBookId}\n                                    newValue={this.state.update}\n                                />\n                            </form>\n                        </React.Fragment>\n                    )\n                })}\n            </div>\n        )\n    }\n\n}\n\n// iline style for textarea\nconst textareaStyle = {\n    display: 'none'\n}\n\nexport default Post;","import React, { Component } from 'react';\nimport firebase from '../firebase.js';\nimport Post from './Post';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass singleBook extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // array of books from firebase\n            singleBook: []\n        };\n    }\n\n    // retriving book details from firebase\n    componentDidMount() {\n        // set up listener to listen for firebase updates\n        const dbRef = firebase.database().ref('/books');\n        dbRef.on('value', (result) => {\n            \n            let data = result.val();\n            let books = [];\n            // pushing books from firebase to local state\n            for (let i in data) {\n                if('/books/' + i === `${window.location.pathname}`) {\n                    books.push({\n                        bookId: i,\n                        title: data[i].title,\n                        writer: data[i].writer\n                    });\n                }\n                \n                this.setState({\n                    singleBook: books\n                });\n            }\n        })\n    }\n    //state updates when user's making changes\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    handleAdd = e => {\n        e.preventDefault();\n        const newPost = firebase.database().ref(`/books/${this.state.singleBook[0].bookId}`).child('/postscript');\n        //just to alert user that it's submitted\n        // alert('Submited!');\n        // adding to firebase\n        newPost.push({\n            postscript: this.state.postscript\n        });\n\n        //clearing input\n        this.setState({\n            postscript: \"\"\n        })\n    }\n\n    \n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"singleBook\">\n\n                    {this.state.singleBook.map((book) => {\n                        return (\n                            <div className=\"post\">\n                                <h2>\n                                    Title: {book.title} \n                                    <br/>\n                                    Writer: {book.writer}</h2>\n                                <div className=\"singlePost\">\n\n                                    <Post id={book.bookId} />\n\n                                </div>\n                            </div>\n                        )\n                    })}\n\n                    <form className=\"addPost\" action=\"\" onSubmit={this.handleAdd}>\n                        <h2>ADD NEW POSTSCRIPT</h2>\n                        <label htmlFor=\"postscript\" className=\"sr-only\">Add Postscript</label>\n                        <textarea\n                            name=\"postscript\"\n                            id=\"postsript\"\n                            cols=\"30\"\n                            rows=\"10\"\n                            placeholder=\"Type here anything\"\n                            minLength=\"5\"\n                            value={this.state.postscript}\n                            onChange={this.handleChange}\n                        >\n                        </textarea>\n                        <br/>\n                        <button type=\"submit\" className=\"submit\">SUBMIT</button>\n                    </form>\n\n                </div>\n                \n                <div className=\"prevPage\">\n                    <Link className=\"linkBack\" exact to=\"/books\">Back</Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default singleBook\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Books from './components/Books';\nimport singleBook from './components/singleBook'\nimport './App.css';\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <Route path=\"/epilogue\">\n          <div className=\"wrapper\">\n            <div className=\"landingPage\">\n              <div className=\"note\">\n                <h3>Hello there!</h3>\n                <p>If you like to read, you probably have many things to say about books. Either you have a strong opinion about character, story or just want to save your favourite quote.</p>\n                <p>Epilogue is online book diary created by book lover for book lovers.</p>\n              </div>\n\n              <div className=\"epilogue\">\n                <div>\n                  <h1>EPILOGUE</h1>\n                  <h2>Book Diary</h2>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"nextPage\">\n              <Link to=\"/books\">TURN THE PAGE</Link>\n            </div>\n            \n          </div>\n\n        </Route>\n\n        <Route exact path=\"/books\" component={Books} />\n        <Route path=\"/books/:id\" component={singleBook} />\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}