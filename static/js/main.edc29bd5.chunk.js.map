{"version":3,"sources":["firebase.js","services/books.service.js","components/Books.js","components/Post.js","components/singleBook.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","database","ref","book","push","key","value","child","update","remove","Books","onDataChange","res","books","data","val","i","bookId","title","writer","setState","allBooks","handleChange","e","target","name","handleSubmit","preventDefault","newBook","state","booksService","create","then","catch","console","log","handleDelete","delete","currentTarget","poscript","getAll","on","this","off","onDatachange","className","action","htmlFor","type","id","onChange","placeholder","minLength","onClick","handleBook","map","to","exact","Component","Post","props","posts","postId","postscripts","postscript","handleDeletePost","split","splice","join","singleBookId","handleUpdatePost","textarea","document","querySelector","modifyButton","updateButton","currentPost","itemRef","style","display","post","Object","values","toString","length","Fragment","textareaStyle","cols","rows","defaultValue","modifyButtonStyle","singleBook","location","pathname","handleAdd","onSubmit","App","basename","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.edc29bd5.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDrz7n6Ua5IC0fSw6zA4-6ODK3oY7kok5Q\",\n    authDomain: \"epilogue-v2.firebaseapp.com\",\n    databaseURL: \"https://epilogue-v2.firebaseio.com\",\n    projectId: \"epilogue-v2\",\n    storageBucket: \"epilogue-v2.appspot.com\",\n    messagingSenderId: \"609448869081\",\n    appId: \"1:609448869081:web:fc4acc06a4835626ddd2c8\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import firebase from \"../firebase\";\n\nconst db = firebase.database().ref('/books');\n\nclass BooksService {\n    getAll() {\n        return db;\n    }\n\n    create(book) {\n        return db.push(book);\n    }\n\n    update(key, value) {\n        return db.child(key).update(value);\n    }\n\n    delete(key) {\n        return db.child(key).remove();\n    }\n}\n\nexport default new BooksService();","import React, { useState, useEffect, Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport booksService from '../services/books.service.js';\n\nclass Books extends Component {\n    constructor() {\n        super();\n        this.state = {\n            title: \"\",\n            writer: \"\",\n            poscript: \"\",\n            // to display books\n            allBooks: []\n        };\n    }\n\n    componentDidMount() {\n        booksService.getAll().on(\"value\", this.onDataChange);\n    }\n\n    componentWillUnmount() {\n        booksService.getAll().off(\"value\", this.onDatachange);\n    }\n\n    onDataChange = res => {\n        let books = [];\n        let data = res.val()\n        for (let i in data) {\n            books.push({\n                bookId: i,\n                title: data[i].title,\n                writer: data[i].writer\n            });\n        }\n        this.setState({\n            allBooks: books\n        })\n    }\n\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        let newBook = {\n            title: this.state.title,\n            writer: this.state.writer\n        }\n        booksService.create(newBook)\n            .then(() => {\n                this.setState({\n                    title: \"\",\n                    writer: \"\"\n                })\n            }).catch((e) => {\n                console.log(e)\n            })\n    }\n\n    handleDelete = (e) => {\n        e.preventDefault();\n        booksService.delete(`${e.currentTarget.name}`);\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"displayBooks\">\n                    <form action=\"\">\n                        <h2>Add Book</h2>\n                        <label htmlFor=\"title\" className=\"sr-only\">Add Book</label>\n                        <input\n                            type=\"text\"\n                            name=\"title\"\n                            id=\"title\"\n                            onChange={this.handleChange}\n                            value={this.state.title}\n                            placeholder=\"Add Book\"\n                            // submit an empty value\n                            minLength=\"5\"\n                        />\n                        <br />\n                        <label htmlFor=\"writer\" className=\"sr-only\">Add Writer</label>\n                        <input\n                            type=\"text\"\n                            name=\"writer\"\n                            id=\"writer\"\n                            onChange={this.handleChange}\n                            value={this.state.writer}\n                            placeholder=\"Add Writer\"\n                            // user can't submit an empty value\n                            minLength=\"5\"\n                        />\n                        <br />\n                        <button\n                            onClick={this.handleSubmit}\n                            type=\"submit\"\n                            className=\"submit\"\n                        >\n                            Submit\n                        </button>\n                    </form>\n\n                    <div\n                        className=\"oneBook\"\n                        onClick={this.handleBook}\n                    >\n                        <h2>MY BOOKS</h2>\n                        <div className=\"allBooks\">\n                            {\n                                this.state.allBooks.map((book) => {\n                                    return (\n                                        <div\n                                            className={`books ${book.bookId}`}\n                                            id={`${book.bookId}`}\n                                            key={book.bookId}\n                                        >\n                                            <p><strong>{book.title} </strong>\n                                                <br />\n                                    by\n                                    <strong> {book.writer}</strong></p>\n                                            <div>\n                                                <Link\n                                                    to={`/books/${book.bookId}`}\n                                                >\n                                                    <i\n                                                        className=\"fas fa-pen-nib\" title=\"write your P.S.\"\n                                                    >\n                                                    </i>\n                                                </Link>\n\n                                                <button onClick={this.handleDelete} className=\"delete\" title=\"delete\" name={`${book.bookId}`}><i className=\"far fa-trash-alt\"></i></button>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            }\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"prevPage\">\n                    <Link className=\"linkBack\" exact to=\"/\">Back</Link>\n                </div>\n            </div>\n\n\n        )\n    }\n}\n\nexport default Books","import React, { Component } from 'react';\nimport firebase from '../firebase.js';\n\nclass Post extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            postscripts: [],\n            singleBookId: Object.values(this.props).toString()\n        };\n    }\n    \n    componentDidMount() {\n        const dbRef = firebase.database().ref(`/books/${this.state.singleBookId}/postscript`);\n        dbRef.on('value', this.onDataChange)\n    }\n\n    componentWillUnmount() {\n        const dbRef = firebase.database().ref(`/books/${this.state.singleBookId}/postscript`);\n        dbRef.off()\n    }\n\n    onDataChange = res => {\n        let data = res.val();\n        let posts = [];\n\n        // pushing postscripts from firebase to local state\n        for (let i in data) {\n            posts.push({\n                postId: i,\n                postscripts: data[i].postscript\n            });\n\n            this.setState({\n                postscripts: posts\n            });\n        }\n    }\n\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n\n    handleDeletePost = e => {\n        // e.preventDefault();\n\n        let postId = e.currentTarget.className.split(' ').splice(1).join(' ');\n\n        const itemRef = firebase.database().ref(`books/${this.state.singleBookId}/postscript/${postId}`);\n        itemRef.remove();\n    }\n\n    handleUpdatePost = e => {\n        e.preventDefault();\n\n        let postId = e.currentTarget.className.split(' ').splice(1).join(' ');\n        let textarea = document.querySelector(`textarea[id = '${postId}']`);\n\n        //buttons reference to change icon\n        let modifyButton = document.querySelector(`button.modify.${postId}`);\n        let updateButton = document.querySelector(`button.update.${postId}`);\n        let currentPost = \"\";\n        const itemRef = firebase.database().ref(`books/${this.state.singleBookId}/postscript/${postId}`);\n\n        //switching to edit mode\n        if (textarea.style.display === \"none\") {\n            textarea.style.display = \"inline\";\n            updateButton.style.display = \"none\";\n            modifyButton.style.display = \"inline\";\n\n        //saving update\n        } else {\n\n            textarea.style.display = \"none\";\n            updateButton.style.display = \"inline\";\n            modifyButton.style.display = \"none\";\n\n            //postcript from the arr in case user decides to not change anything\n            this.state.postscripts.map(post => post.postId === postId\n                ? currentPost = post.postscripts\n                : null);\n\n            !this.state.update\n            ? itemRef.update({ postscript: `${currentPost}` })\n            : itemRef.update({ postscript: `${this.state.update}` });\n        }\n        \n        this.setState({\n            update: \"\",\n        })\n\n    }\n\n    render() {\n        const { postscripts, singleBookId, update } = this.state;\n\n        if (!postscripts.length) {\n            return (\n                <div>\n                    <p>So how was this book? Add something you liked (or didn't) about it.</p>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    {postscripts.map((post) => {\n                        return (\n                            <React.Fragment key={post.postId}>\n                                <p>{post.postscripts}</p>\n                                <form action=\"\">\n                                    <label htmlFor=\"update\" className=\"sr-only\">Update</label>\n                                    <textarea\n                                    // inline style to make handleModify works\n                                        style={textareaStyle}\n                                        className=\"update\" \n                                        name=\"update\"\n                                        // need to access id for modifying\n                                        id={post.postId}\n                                        cols=\"10\" \n                                        rows=\"5\"\n                                        onChange={this.handleChange}\n                                        // using defaultValue to allow changes in a textfield\n                                        defaultValue={post.postscripts}\n                                    >\n                                    </textarea>\n    \n                                    <React.Fragment>\n                                        <br />\n                                        <button\n                                            className={`update ${post.postId}`}\n                                            onClick={this.handleUpdatePost}\n                                            title=\"update P.S.\"\n                                        // id={props.post.postId}\n                                        >\n                                            <i className=\"far fa-edit\"></i>\n                                        </button>\n    \n                                        <button\n                                            // inline style to make handleModify works\n                                            style={modifyButtonStyle}\n                                            className={`modify ${post.postId}`}\n                                            onClick={this.handleUpdatePost}\n                                            title=\"done\"\n                                        >\n                                            <i className=\"far fa-check-square\"></i>\n                                        </button>\n    \n                                        <button\n                                            className={`delete ${post.postId}`}\n                                            onClick={this.handleDeletePost}\n                                            title=\"delete\"\n                                        >\n                                            <i className=\"far fa-trash-alt\">\n                                            </i>\n                                        </button>\n    \n                                    </React.Fragment>\n                                </form>\n                            </React.Fragment>\n                        )\n                    })}\n                </div>\n            )\n        }\n    }\n\n}\n\n// iline style for textarea\nconst textareaStyle = {\n    display: 'none'\n}\n\nconst modifyButtonStyle = {\n    display: 'none'\n}\n\nexport default Post;","import React, { Component } from 'react';\nimport firebase from '../firebase.js';\nimport booksService from '../services/books.service'\nimport Post from './Post';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass singleBook extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // array of books from firebase\n            singleBook: []\n        };\n    }\n\n    componentDidMount() {\n        booksService.getAll().on('value', this.onDataChange)\n    }\n\n    componentWillUnmount() {\n        booksService.getAll().off('value', this.onDataChange)\n    }\n    \n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    onDataChange = res => {\n        let data = res.val();\n        let books = [];\n        // pushing books from firebase to local state\n        for (let i in data) {\n            if ('/books/' + i === `${this.props.location.pathname}`) {\n                books.push({\n                    bookId: i,\n                    title: data[i].title,\n                    writer: data[i].writer\n                });\n            }\n\n            this.setState({\n                singleBook: books\n            });\n        }\n    }\n    \n    handleAdd = e => {\n        e.preventDefault();\n        const newPost = firebase.database().ref(`/books/${this.state.singleBook[0].bookId}`).child('/postscript');\n        newPost.push({\n            postscript: this.state.postscript\n        });\n\n\n        this.setState({\n            postscript: \"\"\n        })\n    }\n\n    \n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"singleBook\">\n\n                    {this.state.singleBook.map((book) => {\n                        return (\n                            <div className=\"post\">\n                                <h2>\n                                    Title: {book.title} \n                                    <br/>\n                                    Writer: {book.writer}</h2>\n                                <div className=\"singlePost\">\n\n                                    <Post id={book.bookId} />\n\n                                </div>\n                            </div>\n                        )\n                    })}\n\n                    <form className=\"addPost\" action=\"\" onSubmit={this.handleAdd}>\n                        <h2>ADD NEW POSTSCRIPT</h2>\n                        <label htmlFor=\"postscript\" className=\"sr-only\">Add Postscript</label>\n                        <textarea\n                            name=\"postscript\"\n                            id=\"postsript\"\n                            cols=\"30\"\n                            rows=\"10\"\n                            placeholder=\"Type here anything\"\n                            minLength=\"5\"\n                            value={this.state.postscript}\n                            onChange={this.handleChange}\n                        >\n                        </textarea>\n                        <br/>\n                        <button type=\"submit\" className=\"submit\">SUBMIT</button>\n                    </form>\n\n                </div>\n                \n                <div className=\"prevPage\">\n                    <Link className=\"linkBack\" exact to=\"/books\">Back</Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default singleBook\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, HashRouter, Route, Link } from \"react-router-dom\";\nimport Books from './components/Books';\nimport singleBook from './components/singleBook'\nimport './App.css';\nclass App extends Component {\n\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <Route exact path=\"/\">\n          <div className=\"wrapper\">\n            <div className=\"landingPage\">\n              <div className=\"note\">\n                <h3>Hello there!</h3>\n                <p>If you like to read, you probably have many things to say about books. Either you have a strong opinion about character, story or just want to save your favourite quote.</p>\n                <p>Epilogue is online book diary created by book lover for book lovers.</p>\n              </div>\n\n              <div className=\"epilogue\">\n                <div>\n                  <h1>EPILOGUE</h1>\n                  <h2>Book Diary</h2>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"nextPage\">\n              <Link to=\"/books\">TURN THE PAGE</Link>\n            </div>\n\n          </div>\n\n        </Route>\n\n        <Route exact path=\"/books\" component={Books} />\n        <Route path=\"/books/:id\" component={singleBook} />\n      </HashRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}